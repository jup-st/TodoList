{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\reactApp\\\\my-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\"; //for unique ID (nanoid library)\n\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\n\nfunction App(props) {\n  _s();\n\n  const [tasks, setTasks] = useState(props.tasks);\n\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        console.log({ ...task,\n          completed: !task.completed\n        });\n        return { ...task,\n          completed: !task.completed\n        };\n      }\n\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return { ...task,\n          name: newName\n        };\n      }\n\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed,\n    //always pass a unique key to anything you render with iteration\n    toggleTaskCompleted: toggleTaskCompleted,\n    deleteTask: deleteTask,\n    editTask: editTask\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 7\n  }, this));\n  const [filter, setFilter] = useState('All');\n  const FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n  };\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\n\n  function addTask(name) {\n    const newTask = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  const filterList = FILTER_NAMES.map(name => /*#__PURE__*/_jsxDEV(FilterButton, {\n    name: name,\n    isPressed: name === filter,\n    setFilter: setFilter\n  }, name, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this));\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoapp stack-large\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TodoMatic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"label-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"new-todo-input\",\n        className: \"label__lg\",\n        children: \"What needs to be done?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters btn-group stack-exception\",\n      children: filterList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"list-heading\",\n      children: headingText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      role: \"list\",\n      className: \"todo-list stack-large stack-exception\",\n      \"aria-labelledby\": \"list-heading\",\n      children: taskList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"EeRnFHbkPD5i3v9CpmwzSMi80Ig=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/reactApp/my-app/src/App.js"],"names":["React","useState","nanoid","Form","FilterButton","Todo","App","props","tasks","setTasks","toggleTaskCompleted","id","updatedTasks","map","task","console","log","completed","deleteTask","remainingTasks","filter","editTask","newName","editedTaskList","name","taskList","FILTER_MAP","setFilter","All","Active","Completed","FILTER_NAMES","Object","keys","addTask","newTask","filterList","tasksNoun","length","headingText"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\";\nimport {nanoid} from \"nanoid\"; //for unique ID (nanoid library)\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n  function toggleTaskCompleted(id) {\n    const updatedTasks = tasks.map(task => {\n      // if this task has the same ID as the edited task\n      if (id === task.id) {\n        // use object spread to make a new object\n        // whose `completed` prop has been inverted\n        console.log({...task, completed: !task.completed})\n        return {...task, completed: !task.completed}\n      }\n      return task;\n    });\n    setTasks(updatedTasks);\n  }\n  function deleteTask(id) {\n    const remainingTasks = tasks.filter(task => id !== task.id);\n    setTasks(remainingTasks);\n  }\n  function editTask(id, newName) {\n    const editedTaskList = tasks.map(task => {\n    // if this task has the same ID as the edited task\n      if (id === task.id) {\n        //\n        return {...task, name: newName}\n      }\n      return task;\n    });\n    setTasks(editedTaskList);\n  }\n  const taskList = tasks.filter(FILTER_MAP[filter]).map(task => (\n      <Todo \n        id={task.id} \n        name={task.name} \n        completed={task.completed} \n        key={task.id} //always pass a unique key to anything you render with iteration\n        toggleTaskCompleted={toggleTaskCompleted}\n        deleteTask={deleteTask}\n        editTask={editTask}\n      />\n    )\n  );\n  const [filter, setFilter] = useState('All');\n  const FILTER_MAP = {\n    All: () => true,\n    Active: task => !task.completed,\n    Completed: task => task.completed\n  };\n  const FILTER_NAMES = Object.keys(FILTER_MAP);\n  function addTask(name) {\n    const newTask = {id: \"todo-\" + nanoid(), name: name, completed: false};\n    setTasks([...tasks, newTask]);\n  }\n  const filterList = FILTER_NAMES.map(name => (\n    <FilterButton\n      key={name}\n      name={name}\n      isPressed={name === filter}\n      setFilter={setFilter}\n    />\n  ));\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n        <h2 className=\"label-wrapper\">\n          <label htmlFor=\"new-todo-input\" className=\"label__lg\">\n            What needs to be done?\n          </label>\n        </h2>\n      <Form addTask={addTask} />\n      <div className=\"filters btn-group stack-exception\">\n        {filterList}\n      </div>\n      <h2 id=\"list-heading\">\n        {headingText}\n      </h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}