{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\reactApp\\\\my-app\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { nanoid } from \"nanoid\"; //for unique ID (nanoid library)\n\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\n\nfunction App(props) {\n  _s();\n\n  const [tasks, setTasks] = useState(props.tasks);\n\n  function addTask(name) {\n    const newTask = {\n      id: \"todo-\" + nanoid(),\n      name: name,\n      completed: false\n    };\n    setTasks([...tasks, newTask]);\n  }\n\n  function toggleTaskCompleted(id) {\n    console.log(tasks[0]);\n  }\n\n  const taskList = tasks.map(task => /*#__PURE__*/_jsxDEV(Todo, {\n    id: task.id,\n    name: task.name,\n    completed: task.completed\n  }, task.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 17,\n    columnNumber: 7\n  }, this));\n  const filter_button = props.filter.map(filter => /*#__PURE__*/_jsxDEV(FilterButton, {\n    name: filter.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this));\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"todoapp stack-large\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"TodoMatic\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"label-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"new-todo-input\",\n        className: \"label__lg\",\n        children: \"What needs to be done?\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      addTask: addTask\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filters btn-group stack-exception\",\n      children: filter_button\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      id: \"list-heading\",\n      children: headingText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      role: \"list\",\n      className: \"todo-list stack-large stack-exception\",\n      \"aria-labelledby\": \"list-heading\",\n      children: taskList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"pjFsLTHS1Kjd+NDyC2kZTexpLic=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/reactApp/my-app/src/App.js"],"names":["React","useState","nanoid","Form","FilterButton","Todo","App","props","tasks","setTasks","addTask","name","newTask","id","completed","toggleTaskCompleted","console","log","taskList","map","task","filter_button","filter","tasksNoun","length","headingText"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,MAAR,QAAqB,QAArB,C,CAA+B;;AAC/B,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;;AAEA,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAAA;;AAClB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,CAACM,KAAK,CAACC,KAAP,CAAlC;;AACA,WAASE,OAAT,CAAiBC,IAAjB,EAAuB;AACrB,UAAMC,OAAO,GAAG;AAACC,MAAAA,EAAE,EAAE,UAAQX,MAAM,EAAnB;AAAuBS,MAAAA,IAAI,EAAEA,IAA7B;AAAmCG,MAAAA,SAAS,EAAE;AAA9C,KAAhB;AACAL,IAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAWI,OAAX,CAAD,CAAR;AACD;;AACD,WAASG,mBAAT,CAA6BF,EAA7B,EAAiC;AAC/BG,IAAAA,OAAO,CAACC,GAAR,CAAYT,KAAK,CAAC,CAAD,CAAjB;AACD;;AACD,QAAMU,QAAQ,GAAGV,KAAK,CAACW,GAAN,CAAUC,IAAI,iBAC3B,QAAC,IAAD;AACE,IAAA,EAAE,EAAEA,IAAI,CAACP,EADX;AAEE,IAAA,IAAI,EAAEO,IAAI,CAACT,IAFb;AAGE,IAAA,SAAS,EAAES,IAAI,CAACN;AAHlB,KAIOM,IAAI,CAACP,EAJZ;AAAA;AAAA;AAAA;AAAA,UADa,CAAjB;AASA,QAAMQ,aAAa,GAAGd,KAAK,CAACe,MAAN,CAAaH,GAAb,CAAiBG,MAAM,iBAC3C,QAAC,YAAD;AACE,IAAA,IAAI,EAAEA,MAAM,CAACX;AADf;AAAA;AAAA;AAAA;AAAA,UADoB,CAAtB;AAMA,QAAMY,SAAS,GAAGL,QAAQ,CAACM,MAAT,KAAoB,CAApB,GAAwB,OAAxB,GAAkC,MAApD;AACA,QAAMC,WAAW,GAAI,GAAEP,QAAQ,CAACM,MAAO,IAAGD,SAAU,YAApD;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,qBAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEI;AAAI,MAAA,SAAS,EAAC,eAAd;AAAA,6BACE;AAAO,QAAA,OAAO,EAAC,gBAAf;AAAgC,QAAA,SAAS,EAAC,WAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAFJ,eAOE,QAAC,IAAD;AAAM,MAAA,OAAO,EAAEb;AAAf;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE;AAAK,MAAA,SAAS,EAAC,mCAAf;AAAA,gBACGW;AADH;AAAA;AAAA;AAAA;AAAA,YARF,eAWE;AAAI,MAAA,EAAE,EAAC,cAAP;AAAA,gBACGI;AADH;AAAA;AAAA;AAAA;AAAA,YAXF,eAcE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,SAAS,EAAC,uCAFZ;AAGE,yBAAgB,cAHlB;AAAA,gBAKGP;AALH;AAAA;AAAA;AAAA;AAAA,YAdF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD;;GAlDQZ,G;;KAAAA,G;AAoDT,eAAeA,GAAf","sourcesContent":["import React, {useState} from \"react\";\nimport {nanoid} from \"nanoid\"; //for unique ID (nanoid library)\nimport Form from \"./components/Form\";\nimport FilterButton from \"./components/FilterButton\";\nimport Todo from \"./components/Todo\";\n\nfunction App(props) {\n  const [tasks, setTasks] = useState(props.tasks);\n  function addTask(name) {\n    const newTask = {id: \"todo-\"+nanoid(), name: name, completed: false};\n    setTasks([...tasks, newTask]);\n  }\n  function toggleTaskCompleted(id) {\n    console.log(tasks[0])\n  }\n  const taskList = tasks.map(task => (\n      <Todo \n        id={task.id} \n        name={task.name} \n        completed={task.completed} \n        key={task.id} //always pass a unique key to anything you render with iteration\n      />\n    )\n  );\n  const filter_button = props.filter.map(filter => (\n    <FilterButton \n      name={filter.name} \n    />\n    )\n  );\n  const tasksNoun = taskList.length !== 1 ? 'tasks' : 'task';\n  const headingText = `${taskList.length} ${tasksNoun} remaining`;\n  return (\n    <div className=\"todoapp stack-large\">\n      <h1>TodoMatic</h1>\n        <h2 className=\"label-wrapper\">\n          <label htmlFor=\"new-todo-input\" className=\"label__lg\">\n            What needs to be done?\n          </label>\n        </h2>\n      <Form addTask={addTask} />\n      <div className=\"filters btn-group stack-exception\">\n        {filter_button}\n      </div>\n      <h2 id=\"list-heading\">\n        {headingText}\n      </h2>\n      <ul\n        role=\"list\"\n        className=\"todo-list stack-large stack-exception\"\n        aria-labelledby=\"list-heading\"\n      >\n        {taskList}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}